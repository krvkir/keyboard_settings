(defcfg
  ;; For Linux
  input  (device-file "/dev/input/by-id/usb-ZSA_Technology_Labs_Moonlander_Mark_I_rd4Kl_bvgA9g-event-kbd")
  output (uinput-sink "KMonad output"
		       ;; To understand the importance of the following line, see the section on
		       ;; Compose-key sequences at the near-bottom of this file.
		       ;; "sleep 1 && setxkbmap -option compose:ralt"
		       )
  cmp-seq ralt    ;; Set the compose key to `RightAlt'
  cmp-seq-delay 5 ;; 5ms delay between each compose-key sequence press
  ;; key-seq-delay 5 ;; 5ms delay between each outputted key event

  ;; For Windows
  ;; input  (low-level-hook)
  ;; output (send-event-sink)

  ;; For MacOS
  ;; input  (iokit-name "my-keyboard-product-string")
  ;; output (kext)

  ;; Comment this if you want unhandled events not to be emitted
  fallthrough true

  ;; Set this to false to disable any command-execution in KMonad
  allow-cmd true

  ;; Set the implicit around to `around`
  implicit-around around
  )


;; The benefit of having two systems for keyboard mapping is that we can have
;; QMK-style mappings on each keyboard, and not depend on X sybsystem. Also, those
;; keybindings are more stable and won't break in electron or java swing apps,
;; which happened with X11-level bindings. Also, KMonad promises to work under
;; Windows and Mac, so we don't need to write mappings for those systems from scratch.
;; With KMonad, we can have a single main config for all the OSes and a thin layer
;; of OS-dependent customizations. E.g. we can greatly simplify X11 overlay.

(defsrc
  grv  1    2    3    4    5              6    7    8    9    0    ]
  tab  q    w    e    r    t              y    u    i    o    p    [
  caps a    s    d    f    g              h    j    k    l    ;    '
  lsft z    x    c    v    b              n    m    ,    .    /    rsft
            up   down lalt spc  lmet lctl ret  ralt kp-  kp+  
)


(defalias
  nav (layer-toggle navigation) ;; Bind num to a button that switches to a layer
  mou (layer-toggle mouse) ;; Bind num to a button that switches to a layer
  Ma (tap-hold-next-release 300 a lctl) ;; Bind num to a button that switches to a layer
  Mf (tap-hold-next-release 300 f lmet) ;; Bind num to a button that switches to a layer
  Mj (tap-hold-next-release 300 j lmet) ;; Bind num to a button that switches to a layer
  Ml (tap-hold-next-release 200 l lalt) ;; Bind num to a button that switches to a layer
  Msc (tap-hold-next-release 200 ; lctl) ;; Bind num to a button that switches to a layer
  Msp (tap-hold-next-release 300 spc @mou)
  )


(deflayer qwerty
  grv  1    2    3    4    5              6    7    8    9    0    ]
  tab  q    w    e    r    t              y    u    i    o    p    [
  @nav @Ma  s    d    @Mf  g              h    @Mj  k    @Ml  @Msc '
  lsft z    x    c    v    b              n    m    ,    .    /    rsft
            up   down lalt @Msp lmet lctl ret  ralt kp-  kp+  
)


(defalias
  Cbs C-bspc
  Cdl C-del
  Clt C-left
  Crt C-rght
  Mr M-ret
  Cr C-ret
  ;; Here we have inverse dependency: this layer knows
  ;; how the upper layer (xkbcomp) handles caps lock.
  ;; To make things work even without caps handling,
  ;; we add extra caps tap after each key.
  ;; The best way would be to have special key which means comma and only comma
  ;; and which doesn't depend on layout. Maybe a modifier which normally does nothing
  ;; but can be handled at layout level. But we have only 3 modifiers. 
  O. (tap-macro (around caps .) caps)
  O, (tap-macro (around caps ,) caps)
  O/ (tap-macro (around caps /) caps)
  O; (tap-macro (around caps ;) caps)
  O' (tap-macro (around caps ') caps)
  O[ (tap-macro (around caps [) caps)
  O] (tap-macro (around caps ]) caps)
  )


(deflayer navigation
  _    f1   f2   f3   f4   f5             6    7    8    9    0    @O]
  _    pgup pgdn @Cbs @Cdl =              -    @Clt up   @Crt \    @O[
  caps tab  ret  bspc del  esc            grv  left down rght @O;  @O'
  _    C-z  C-x  C-c  C-v  C-b            home ins  @O, @O.   @O/  _
            S-9  S-0  _    _    _    _    @Cr  _    @O[ @O]
)


(deflayer mouse
  _    _    _    _    _    _              _    _    _    _    _    _
  _    _    _    _    _    _              _    1    2    3    4    _
  _    _    _    _    _    _              _    5    6    7    8    _
  _    _    _    _    _    _              9    0    _    _    _    _
            _    _    _    _    _    _    @Mr  _    _    _  
)
